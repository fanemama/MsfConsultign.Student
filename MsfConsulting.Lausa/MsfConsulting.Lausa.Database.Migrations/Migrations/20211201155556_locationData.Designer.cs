// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MsfConsulting.Lausa.Domain.Repository;

namespace MsfConsulting.Lausa.Database.Migrations.Migrations
{
    [DbContext(typeof(LausaDbContext))]
    [Migration("20211201155556_locationData")]
    partial class locationData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("MsfConsulting.Lausa.Domain.Model.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Physic",
                            Label = "Physic"
                        },
                        new
                        {
                            Id = 2,
                            Code = "Mathematic",
                            Label = "Mathematic"
                        },
                        new
                        {
                            Id = 3,
                            Code = "Biologic",
                            Label = "Biologic"
                        },
                        new
                        {
                            Id = 4,
                            Code = "Geographic",
                            Label = "Geographic"
                        });
                });

            modelBuilder.Entity("MsfConsulting.Lausa.Domain.Model.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("GradeId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("MsfConsulting.Lausa.Domain.Model.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "A",
                            Label = "A"
                        },
                        new
                        {
                            Id = 2,
                            Code = "B",
                            Label = "B"
                        },
                        new
                        {
                            Id = 3,
                            Code = "C",
                            Label = "C"
                        },
                        new
                        {
                            Id = 4,
                            Code = "D",
                            Label = "D"
                        },
                        new
                        {
                            Id = 5,
                            Code = "F",
                            Label = "F"
                        });
                });

            modelBuilder.Entity("MsfConsulting.Lausa.Domain.Model.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<double>("Elevation")
                        .HasColumnType("double");

                    b.Property<double>("Heading")
                        .HasColumnType("double");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<double>("Speed")
                        .HasColumnType("double");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2021, 12, 1, 16, 55, 56, 259, DateTimeKind.Local).AddTicks(50),
                            Elevation = 0.0,
                            Heading = 0.0,
                            Latitude = 40.511070799999999,
                            Longitude = 5.0259003,
                            Speed = 150.0
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2021, 12, 1, 16, 55, 56, 261, DateTimeKind.Local).AddTicks(1273),
                            Elevation = 0.0,
                            Heading = 0.0,
                            Latitude = 46.511070799999999,
                            Longitude = 6.6258002999999999,
                            Speed = 150.0
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2021, 12, 1, 16, 55, 56, 261, DateTimeKind.Local).AddTicks(1303),
                            Elevation = 0.0,
                            Heading = 0.0,
                            Latitude = 41.511070799999999,
                            Longitude = 8.1257003000000001,
                            Speed = 150.0
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2021, 12, 1, 16, 55, 56, 261, DateTimeKind.Local).AddTicks(1307),
                            Elevation = 0.0,
                            Heading = 0.0,
                            Latitude = 42.511070799999999,
                            Longitude = 15.2256003,
                            Speed = 150.0
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2021, 12, 1, 16, 55, 56, 261, DateTimeKind.Local).AddTicks(1309),
                            Elevation = 0.0,
                            Heading = 0.0,
                            Latitude = 43.511070799999999,
                            Longitude = 10.3255003,
                            Speed = 150.0
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2021, 12, 1, 16, 55, 56, 261, DateTimeKind.Local).AddTicks(1312),
                            Elevation = 0.0,
                            Heading = 0.0,
                            Latitude = 44.511070799999999,
                            Longitude = 7.4254002999999997,
                            Speed = 150.0
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2021, 12, 1, 16, 55, 56, 261, DateTimeKind.Local).AddTicks(1315),
                            Elevation = 0.0,
                            Heading = 0.0,
                            Latitude = 45.511070799999999,
                            Longitude = 2.5253003000000001,
                            Speed = 150.0
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2021, 12, 1, 16, 55, 56, 261, DateTimeKind.Local).AddTicks(1318),
                            Elevation = 0.0,
                            Heading = 0.0,
                            Latitude = 46.511070799999999,
                            Longitude = 3.6252002999999999,
                            Speed = 150.0
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2021, 12, 1, 16, 55, 56, 261, DateTimeKind.Local).AddTicks(1320),
                            Elevation = 0.0,
                            Heading = 0.0,
                            Latitude = 47.511070799999999,
                            Longitude = 4.7251003000000003,
                            Speed = 150.0
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2021, 12, 1, 16, 55, 56, 261, DateTimeKind.Local).AddTicks(1323),
                            Elevation = 0.0,
                            Heading = 0.0,
                            Latitude = 48.511070799999999,
                            Longitude = 5.8250003000000001,
                            Speed = 150.0
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2021, 12, 1, 16, 55, 56, 261, DateTimeKind.Local).AddTicks(1326),
                            Elevation = 0.0,
                            Heading = 0.0,
                            Latitude = 49.511070799999999,
                            Longitude = 3.9248002999999998,
                            Speed = 150.0
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2021, 12, 1, 16, 55, 56, 261, DateTimeKind.Local).AddTicks(1330),
                            Elevation = 0.0,
                            Heading = 0.0,
                            Latitude = 42.511070799999999,
                            Longitude = 6.0241002999999997,
                            Speed = 150.0
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2021, 12, 1, 16, 55, 56, 261, DateTimeKind.Local).AddTicks(1334),
                            Elevation = 0.0,
                            Heading = 0.0,
                            Latitude = 46.511070799999999,
                            Longitude = 6.4257002999999999,
                            Speed = 150.0
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2021, 12, 1, 16, 55, 56, 261, DateTimeKind.Local).AddTicks(1337),
                            Elevation = 0.0,
                            Heading = 0.0,
                            Latitude = 46.511070799999999,
                            Longitude = 6.5259003,
                            Speed = 150.0
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2021, 12, 1, 16, 55, 56, 261, DateTimeKind.Local).AddTicks(1340),
                            Elevation = 0.0,
                            Heading = 0.0,
                            Latitude = 46.511070799999999,
                            Longitude = 6.6560002999999996,
                            Speed = 150.0
                        });
                });

            modelBuilder.Entity("MsfConsulting.Lausa.Domain.Model.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int?>("LiveLocationId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LiveLocationId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "toto@titu.fr",
                            FirstName = "BMW",
                            LastName = "LastName1",
                            LiveLocationId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "toto@titu.fr",
                            FirstName = "RENAULT",
                            LastName = "LastName2",
                            LiveLocationId = 2
                        },
                        new
                        {
                            Id = 3,
                            Email = "toto@titu.fr",
                            FirstName = "MERCEDES",
                            LastName = "LastName3",
                            LiveLocationId = 3
                        },
                        new
                        {
                            Id = 4,
                            Email = "toto@titu.fr",
                            FirstName = "SUZUKI",
                            LastName = "LastName4",
                            LiveLocationId = 4
                        },
                        new
                        {
                            Id = 5,
                            Email = "toto@titu.fr",
                            FirstName = "TOYOTA",
                            LastName = "LastName5",
                            LiveLocationId = 5
                        },
                        new
                        {
                            Id = 6,
                            Email = "toto@titu.fr",
                            FirstName = "PEUGEOT",
                            LastName = "LastName6",
                            LiveLocationId = 6
                        },
                        new
                        {
                            Id = 7,
                            Email = "toto@titu.fr",
                            FirstName = "PORSCHE",
                            LastName = "LastName7",
                            LiveLocationId = 7
                        },
                        new
                        {
                            Id = 8,
                            Email = "toto@titu.fr",
                            FirstName = "MERCEDES",
                            LastName = "LastName8",
                            LiveLocationId = 8
                        },
                        new
                        {
                            Id = 9,
                            Email = "toto@titu.fr",
                            FirstName = "OPEL",
                            LastName = "LastName9",
                            LiveLocationId = 9
                        },
                        new
                        {
                            Id = 10,
                            Email = "toto@titu.fr",
                            FirstName = "TOYOTA",
                            LastName = "LastName10",
                            LiveLocationId = 10
                        },
                        new
                        {
                            Id = 11,
                            Email = "toto@titu.fr",
                            FirstName = "CITROEN",
                            LastName = "LastName11",
                            LiveLocationId = 11
                        },
                        new
                        {
                            Id = 12,
                            Email = "toto@titu.fr",
                            FirstName = "PEUGEOT",
                            LastName = "LastName12",
                            LiveLocationId = 12
                        },
                        new
                        {
                            Id = 13,
                            Email = "toto@titu.fr",
                            FirstName = "BMW",
                            LastName = "LastName13",
                            LiveLocationId = 13
                        },
                        new
                        {
                            Id = 14,
                            Email = "toto@titu.fr",
                            FirstName = "RENAULT",
                            LastName = "LastName14",
                            LiveLocationId = 14
                        },
                        new
                        {
                            Id = 15,
                            Email = "toto@titu.fr",
                            FirstName = "MERCEDES",
                            LastName = "LastName15",
                            LiveLocationId = 15
                        });
                });

            modelBuilder.Entity("MsfConsulting.Lausa.Domain.Model.Unenrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Unenrollments");
                });

            modelBuilder.Entity("MsfConsulting.Lausa.Domain.Model.Enrollment", b =>
                {
                    b.HasOne("MsfConsulting.Lausa.Domain.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MsfConsulting.Lausa.Domain.Model.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId");

                    b.HasOne("MsfConsulting.Lausa.Domain.Model.Student", "Student")
                        .WithMany("Enrollements")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Grade");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MsfConsulting.Lausa.Domain.Model.Student", b =>
                {
                    b.HasOne("MsfConsulting.Lausa.Domain.Model.Location", "LiveLocation")
                        .WithOne("Student")
                        .HasForeignKey("MsfConsulting.Lausa.Domain.Model.Student", "LiveLocationId");

                    b.Navigation("LiveLocation");
                });

            modelBuilder.Entity("MsfConsulting.Lausa.Domain.Model.Unenrollment", b =>
                {
                    b.HasOne("MsfConsulting.Lausa.Domain.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MsfConsulting.Lausa.Domain.Model.Student", "Student")
                        .WithMany("Unenrollements")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MsfConsulting.Lausa.Domain.Model.Location", b =>
                {
                    b.Navigation("Student");
                });

            modelBuilder.Entity("MsfConsulting.Lausa.Domain.Model.Student", b =>
                {
                    b.Navigation("Enrollements");

                    b.Navigation("Unenrollements");
                });
#pragma warning restore 612, 618
        }
    }
}
